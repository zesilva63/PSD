%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.0.2
-module(protocol).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).


%% enumerated types

-export_type([]).

%% message types
-type 'Response'() ::
      #{result                  => iolist(),        % = 1
        description             => iolist()         % = 2
       }.
-type 'Request'() ::
      #{company                 => iolist(),        % = 1
        quantity                => integer(),       % = 2, 32 bits
        price                   => float() | integer() | infinity | '-infinity' | nan % = 3
       }.
-type 'User'() ::
      #{username                => iolist(),        % = 1
        password                => iolist()         % = 2
       }.
-type 'Message'() ::
      #{type                    => iolist(),        % = 1
        user                    => 'User'(),        % = 2
        request                 => 'Request'(),     % = 3
        response                => 'Response'()     % = 4
       }.
-export_type(['Response'/0, 'Request'/0, 'User'/0, 'Message'/0]).

-spec encode_msg('Response'() | 'Request'() | 'User'() | 'Message'(),'Response' | 'Request' | 'User' | 'Message') -> binary().
encode_msg(Msg, MsgName) ->
    encode_msg(Msg, MsgName, []).


-spec encode_msg('Response'() | 'Request'() | 'User'() | 'Message'(),'Response' | 'Request' | 'User' | 'Message', list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Response' -> e_msg_Response(Msg, TrUserData);
      'Request' -> e_msg_Request(Msg, TrUserData);
      'User' -> e_msg_User(Msg, TrUserData);
      'Message' -> e_msg_Message(Msg, TrUserData)
    end.



e_msg_Response(Msg, TrUserData) ->
    e_msg_Response(Msg, <<>>, TrUserData).


e_msg_Response(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{result := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 e_type_string(TrF1, <<Bin/binary, 10>>)
	       end;
	   _ -> Bin
	 end,
    case M of
      #{description := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    e_type_string(TrF2, <<B1/binary, 18>>)
	  end;
      _ -> B1
    end.

e_msg_Request(Msg, TrUserData) ->
    e_msg_Request(Msg, <<>>, TrUserData).


e_msg_Request(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{company := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 e_type_string(TrF1, <<Bin/binary, 10>>)
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{quantity := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 e_type_int32(TrF2, <<B1/binary, 16>>)
	       end;
	   _ -> B1
	 end,
    case M of
      #{price := F3} ->
	  begin
	    TrF3 = id(F3, TrUserData),
	    e_type_float(TrF3, <<B2/binary, 29>>)
	  end;
      _ -> B2
    end.

e_msg_User(Msg, TrUserData) ->
    e_msg_User(Msg, <<>>, TrUserData).


e_msg_User(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{username := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 e_type_string(TrF1, <<Bin/binary, 10>>)
	       end;
	   _ -> Bin
	 end,
    case M of
      #{password := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    e_type_string(TrF2, <<B1/binary, 18>>)
	  end;
      _ -> B1
    end.

e_msg_Message(Msg, TrUserData) ->
    e_msg_Message(Msg, <<>>, TrUserData).


e_msg_Message(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{type := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 e_type_string(TrF1, <<Bin/binary, 10>>)
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{user := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 e_mfield_Message_user(TrF2, <<B1/binary, 18>>,
				       TrUserData)
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{request := F3} ->
	       begin
		 TrF3 = id(F3, TrUserData),
		 e_mfield_Message_request(TrF3, <<B2/binary, 26>>,
					  TrUserData)
	       end;
	   _ -> B2
	 end,
    case M of
      #{response := F4} ->
	  begin
	    TrF4 = id(F4, TrUserData),
	    e_mfield_Message_response(TrF4, <<B3/binary, 34>>,
				      TrUserData)
	  end;
      _ -> B3
    end.

e_mfield_Message_user(Msg, Bin, TrUserData) ->
    SubBin = e_msg_User(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Message_request(Msg, Bin, TrUserData) ->
    SubBin = e_msg_Request(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Message_response(Msg, Bin, TrUserData) ->
    SubBin = e_msg_Response(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_type_int32(Value, Bin)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_type_float(V, Bin) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin) ->
    <<Bin/binary, 0:16, 192, 127>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Response' ->
	  try d_msg_Response(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'Response', {Class, Reason, StackTrace}}}})
	  end;
      'Request' ->
	  try d_msg_Request(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'Request', {Class, Reason, StackTrace}}}})
	  end;
      'User' ->
	  try d_msg_User(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'User', {Class, Reason, StackTrace}}}})
	  end;
      'Message' ->
	  try d_msg_Message(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'Message', {Class, Reason, StackTrace}}}})
	  end
    end.



d_msg_Response(Bin, TrUserData) ->
    dfp_read_field_def_Response(Bin, 0, 0,
				id('$undef', TrUserData),
				id('$undef', TrUserData), TrUserData).

dfp_read_field_def_Response(<<10, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, TrUserData) ->
    d_field_Response_result(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
dfp_read_field_def_Response(<<18, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, TrUserData) ->
    d_field_Response_description(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData);
dfp_read_field_def_Response(<<>>, 0, 0, F@_1, F@_2,
			    _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{result => F@_1}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{description => F@_2}
    end;
dfp_read_field_def_Response(Other, Z1, Z2, F@_1, F@_2,
			    TrUserData) ->
    dg_read_field_def_Response(Other, Z1, Z2, F@_1, F@_2,
			       TrUserData).

dg_read_field_def_Response(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Response(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
dg_read_field_def_Response(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Response_result(Rest, 0, 0, F@_1, F@_2,
				  TrUserData);
      18 ->
	  d_field_Response_description(Rest, 0, 0, F@_1, F@_2,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Response(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
	    1 ->
		skip_64_Response(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_Response(Rest, 0, 0, F@_1, F@_2,
					       TrUserData);
	    3 ->
		skip_group_Response(Rest, Key bsr 3, 0, F@_1, F@_2,
				    TrUserData);
	    5 ->
		skip_32_Response(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_Response(<<>>, 0, 0, F@_1, F@_2, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{result => F@_1}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{description => F@_2}
    end.

d_field_Response_result(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_Response_result(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, TrUserData);
d_field_Response_result(<<0:1, X:7, Rest/binary>>, N,
			Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_Response(RestF, 0, 0, NewFValue,
				F@_2, TrUserData).

d_field_Response_description(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_Response_description(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, TrUserData);
d_field_Response_description(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_Response(RestF, 0, 0, F@_1,
				NewFValue, TrUserData).

skip_varint_Response(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    skip_varint_Response(Rest, Z1, Z2, F@_1, F@_2,
			 TrUserData);
skip_varint_Response(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_Response(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

skip_length_delimited_Response(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_Response(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_Response(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Response(Rest2, 0, 0, F@_1, F@_2,
				TrUserData).

skip_group_Response(Bin, FNum, Z2, F@_1, F@_2,
		    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Response(Rest, 0, Z2, F@_1, F@_2,
				TrUserData).

skip_32_Response(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, TrUserData) ->
    dfp_read_field_def_Response(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

skip_64_Response(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, TrUserData) ->
    dfp_read_field_def_Response(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

d_msg_Request(Bin, TrUserData) ->
    dfp_read_field_def_Request(Bin, 0, 0,
			       id('$undef', TrUserData),
			       id('$undef', TrUserData),
			       id('$undef', TrUserData), TrUserData).

dfp_read_field_def_Request(<<10, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, TrUserData) ->
    d_field_Request_company(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    TrUserData);
dfp_read_field_def_Request(<<16, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, TrUserData) ->
    d_field_Request_quantity(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     TrUserData);
dfp_read_field_def_Request(<<29, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, TrUserData) ->
    d_field_Request_price(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  TrUserData);
dfp_read_field_def_Request(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{company => F@_1}
	 end,
    S3 = if F@_2 == '$undef' -> S2;
	    true -> S2#{quantity => F@_2}
	 end,
    if F@_3 == '$undef' -> S3;
       true -> S3#{price => F@_3}
    end;
dfp_read_field_def_Request(Other, Z1, Z2, F@_1, F@_2,
			   F@_3, TrUserData) ->
    dg_read_field_def_Request(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData).

dg_read_field_def_Request(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Request(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_Request(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Request_company(Rest, 0, 0, F@_1, F@_2, F@_3,
				  TrUserData);
      16 ->
	  d_field_Request_quantity(Rest, 0, 0, F@_1, F@_2, F@_3,
				   TrUserData);
      29 ->
	  d_field_Request_price(Rest, 0, 0, F@_1, F@_2, F@_3,
				TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Request(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData);
	    1 ->
		skip_64_Request(Rest, 0, 0, F@_1, F@_2, F@_3,
				TrUserData);
	    2 ->
		skip_length_delimited_Request(Rest, 0, 0, F@_1, F@_2,
					      F@_3, TrUserData);
	    3 ->
		skip_group_Request(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				   TrUserData);
	    5 ->
		skip_32_Request(Rest, 0, 0, F@_1, F@_2, F@_3,
				TrUserData)
	  end
    end;
dg_read_field_def_Request(<<>>, 0, 0, F@_1, F@_2, F@_3,
			  _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{company => F@_1}
	 end,
    S3 = if F@_2 == '$undef' -> S2;
	    true -> S2#{quantity => F@_2}
	 end,
    if F@_3 == '$undef' -> S3;
       true -> S3#{price => F@_3}
    end.

d_field_Request_company(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_Request_company(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, TrUserData);
d_field_Request_company(<<0:1, X:7, Rest/binary>>, N,
			Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_Request(RestF, 0, 0, NewFValue, F@_2,
			       F@_3, TrUserData).

d_field_Request_quantity(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_Request_quantity(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, TrUserData);
d_field_Request_quantity(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_Request(RestF, 0, 0, F@_1, NewFValue,
			       F@_3, TrUserData).

d_field_Request_price(<<0:16, 128, 127, Rest/binary>>,
		      Z1, Z2, F@_1, F@_2, _, TrUserData) ->
    dfp_read_field_def_Request(Rest, Z1, Z2, F@_1, F@_2,
			       infinity, TrUserData);
d_field_Request_price(<<0:16, 128, 255, Rest/binary>>,
		      Z1, Z2, F@_1, F@_2, _, TrUserData) ->
    dfp_read_field_def_Request(Rest, Z1, Z2, F@_1, F@_2,
			       '-infinity', TrUserData);
d_field_Request_price(<<_:16, 1:1, _:7, _:1, 127:7,
			Rest/binary>>,
		      Z1, Z2, F@_1, F@_2, _, TrUserData) ->
    dfp_read_field_def_Request(Rest, Z1, Z2, F@_1, F@_2,
			       nan, TrUserData);
d_field_Request_price(<<Value:32/little-float,
			Rest/binary>>,
		      Z1, Z2, F@_1, F@_2, _, TrUserData) ->
    dfp_read_field_def_Request(Rest, Z1, Z2, F@_1, F@_2,
			       Value, TrUserData).

skip_varint_Request(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_Request(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			TrUserData);
skip_varint_Request(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_Request(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData).

skip_length_delimited_Request(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_Request(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_Request(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Request(Rest2, 0, 0, F@_1, F@_2,
			       F@_3, TrUserData).

skip_group_Request(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Request(Rest, 0, Z2, F@_1, F@_2,
			       F@_3, TrUserData).

skip_32_Request(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_Request(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData).

skip_64_Request(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_Request(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData).

d_msg_User(Bin, TrUserData) ->
    dfp_read_field_def_User(Bin, 0, 0,
			    id('$undef', TrUserData), id('$undef', TrUserData),
			    TrUserData).

dfp_read_field_def_User(<<10, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, TrUserData) ->
    d_field_User_username(Rest, Z1, Z2, F@_1, F@_2,
			  TrUserData);
dfp_read_field_def_User(<<18, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, TrUserData) ->
    d_field_User_password(Rest, Z1, Z2, F@_1, F@_2,
			  TrUserData);
dfp_read_field_def_User(<<>>, 0, 0, F@_1, F@_2, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{username => F@_1}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{password => F@_2}
    end;
dfp_read_field_def_User(Other, Z1, Z2, F@_1, F@_2,
			TrUserData) ->
    dg_read_field_def_User(Other, Z1, Z2, F@_1, F@_2,
			   TrUserData).

dg_read_field_def_User(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_User(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, TrUserData);
dg_read_field_def_User(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_User_username(Rest, 0, 0, F@_1, F@_2,
				TrUserData);
      18 ->
	  d_field_User_password(Rest, 0, 0, F@_1, F@_2,
				TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_User(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 -> skip_64_User(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_User(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
	    3 ->
		skip_group_User(Rest, Key bsr 3, 0, F@_1, F@_2,
				TrUserData);
	    5 -> skip_32_User(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_User(<<>>, 0, 0, F@_1, F@_2, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{username => F@_1}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{password => F@_2}
    end.

d_field_User_username(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_User_username(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, TrUserData);
d_field_User_username(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_User(RestF, 0, 0, NewFValue, F@_2,
			    TrUserData).

d_field_User_password(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_User_password(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, TrUserData);
d_field_User_password(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_User(RestF, 0, 0, F@_1, NewFValue,
			    TrUserData).

skip_varint_User(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		 F@_1, F@_2, TrUserData) ->
    skip_varint_User(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
skip_varint_User(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		 F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_User(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData).

skip_length_delimited_User(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_User(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
skip_length_delimited_User(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_User(Rest2, 0, 0, F@_1, F@_2,
			    TrUserData).

skip_group_User(Bin, FNum, Z2, F@_1, F@_2,
		TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_User(Rest, 0, Z2, F@_1, F@_2,
			    TrUserData).

skip_32_User(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	     TrUserData) ->
    dfp_read_field_def_User(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData).

skip_64_User(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	     TrUserData) ->
    dfp_read_field_def_User(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData).

d_msg_Message(Bin, TrUserData) ->
    dfp_read_field_def_Message(Bin, 0, 0,
			       id('$undef', TrUserData),
			       id('$undef', TrUserData),
			       id('$undef', TrUserData),
			       id('$undef', TrUserData), TrUserData).

dfp_read_field_def_Message(<<10, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_Message_type(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, TrUserData);
dfp_read_field_def_Message(<<18, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_Message_user(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, TrUserData);
dfp_read_field_def_Message(<<26, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_Message_request(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, TrUserData);
dfp_read_field_def_Message(<<34, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_Message_response(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, TrUserData);
dfp_read_field_def_Message(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   F@_4, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{type => F@_1}
	 end,
    S3 = if F@_2 == '$undef' -> S2;
	    true -> S2#{user => F@_2}
	 end,
    S4 = if F@_3 == '$undef' -> S3;
	    true -> S3#{request => F@_3}
	 end,
    if F@_4 == '$undef' -> S4;
       true -> S4#{response => F@_4}
    end;
dfp_read_field_def_Message(Other, Z1, Z2, F@_1, F@_2,
			   F@_3, F@_4, TrUserData) ->
    dg_read_field_def_Message(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData).

dg_read_field_def_Message(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Message(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_Message(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Message_type(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       TrUserData);
      18 ->
	  d_field_Message_user(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       TrUserData);
      26 ->
	  d_field_Message_request(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, TrUserData);
      34 ->
	  d_field_Message_response(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Message(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				    TrUserData);
	    1 ->
		skip_64_Message(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				TrUserData);
	    2 ->
		skip_length_delimited_Message(Rest, 0, 0, F@_1, F@_2,
					      F@_3, F@_4, TrUserData);
	    3 ->
		skip_group_Message(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				   F@_4, TrUserData);
	    5 ->
		skip_32_Message(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				TrUserData)
	  end
    end;
dg_read_field_def_Message(<<>>, 0, 0, F@_1, F@_2, F@_3,
			  F@_4, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{type => F@_1}
	 end,
    S3 = if F@_2 == '$undef' -> S2;
	    true -> S2#{user => F@_2}
	 end,
    S4 = if F@_3 == '$undef' -> S3;
	    true -> S3#{request => F@_3}
	 end,
    if F@_4 == '$undef' -> S4;
       true -> S4#{response => F@_4}
    end.

d_field_Message_type(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_Message_type(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, TrUserData);
d_field_Message_type(<<0:1, X:7, Rest/binary>>, N, Acc,
		     _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_Message(RestF, 0, 0, NewFValue, F@_2,
			       F@_3, F@_4, TrUserData).

d_field_Message_user(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_Message_user(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, TrUserData);
d_field_Message_user(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, Prev, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_User(Bs, TrUserData), TrUserData), Rest2}
			 end,
    dfp_read_field_def_Message(RestF, 0, 0, F@_1,
			       if Prev == '$undef' -> NewFValue;
				  true ->
				      merge_msg_User(Prev, NewFValue,
						     TrUserData)
			       end,
			       F@_3, F@_4, TrUserData).

d_field_Message_request(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_Message_request(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_Message_request(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, Prev, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_Request(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Message(RestF, 0, 0, F@_1, F@_2,
			       if Prev == '$undef' -> NewFValue;
				  true ->
				      merge_msg_Request(Prev, NewFValue,
							TrUserData)
			       end,
			       F@_4, TrUserData).

d_field_Message_response(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_Message_response(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_Message_response(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_Response(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Message(RestF, 0, 0, F@_1, F@_2,
			       F@_3,
			       if Prev == '$undef' -> NewFValue;
				  true ->
				      merge_msg_Response(Prev, NewFValue,
							 TrUserData)
			       end,
			       TrUserData).

skip_varint_Message(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_Message(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, TrUserData);
skip_varint_Message(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_Message(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, TrUserData).

skip_length_delimited_Message(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    skip_length_delimited_Message(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				  TrUserData);
skip_length_delimited_Message(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Message(Rest2, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, TrUserData).

skip_group_Message(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		   F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Message(Rest, 0, Z2, F@_1, F@_2,
			       F@_3, F@_4, TrUserData).

skip_32_Message(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_Message(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, TrUserData).

skip_64_Message(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_Message(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New, MsgName) ->
    merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Response' -> merge_msg_Response(Prev, New, TrUserData);
      'Request' -> merge_msg_Request(Prev, New, TrUserData);
      'User' -> merge_msg_User(Prev, New, TrUserData);
      'Message' -> merge_msg_Message(Prev, New, TrUserData)
    end.

merge_msg_Response(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{result := NFresult}} -> S1#{result => NFresult};
	   {#{result := PFresult}, _} -> S1#{result => PFresult};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{description := NFdescription}} ->
	  S2#{description => NFdescription};
      {#{description := PFdescription}, _} ->
	  S2#{description => PFdescription};
      _ -> S2
    end.

merge_msg_Request(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{company := NFcompany}} ->
	       S1#{company => NFcompany};
	   {#{company := PFcompany}, _} ->
	       S1#{company => PFcompany};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{quantity := NFquantity}} ->
	       S2#{quantity => NFquantity};
	   {#{quantity := PFquantity}, _} ->
	       S2#{quantity => PFquantity};
	   _ -> S2
	 end,
    case {PMsg, NMsg} of
      {_, #{price := NFprice}} -> S3#{price => NFprice};
      {#{price := PFprice}, _} -> S3#{price => PFprice};
      _ -> S3
    end.

merge_msg_User(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{username := NFusername}} ->
	       S1#{username => NFusername};
	   {#{username := PFusername}, _} ->
	       S1#{username => PFusername};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{password := NFpassword}} ->
	  S2#{password => NFpassword};
      {#{password := PFpassword}, _} ->
	  S2#{password => PFpassword};
      _ -> S2
    end.

merge_msg_Message(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{type := NFtype}} -> S1#{type => NFtype};
	   {#{type := PFtype}, _} -> S1#{type => PFtype};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {#{user := PFuser}, #{user := NFuser}} ->
	       S2#{user => merge_msg_User(PFuser, NFuser, TrUserData)};
	   {_, #{user := NFuser}} -> S2#{user => NFuser};
	   {#{user := PFuser}, _} -> S2#{user => PFuser};
	   {_, _} -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {#{request := PFrequest}, #{request := NFrequest}} ->
	       S3#{request =>
		       merge_msg_Request(PFrequest, NFrequest, TrUserData)};
	   {_, #{request := NFrequest}} ->
	       S3#{request => NFrequest};
	   {#{request := PFrequest}, _} ->
	       S3#{request => PFrequest};
	   {_, _} -> S3
	 end,
    case {PMsg, NMsg} of
      {#{response := PFresponse},
       #{response := NFresponse}} ->
	  S4#{response =>
		  merge_msg_Response(PFresponse, NFresponse, TrUserData)};
      {_, #{response := NFresponse}} ->
	  S4#{response => NFresponse};
      {#{response := PFresponse}, _} ->
	  S4#{response => PFresponse};
      {_, _} -> S4
    end.


verify_msg(Msg, MsgName) ->
    verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Response' ->
	  v_msg_Response(Msg, ['Response'], TrUserData);
      'Request' ->
	  v_msg_Request(Msg, ['Request'], TrUserData);
      'User' -> v_msg_User(Msg, ['User'], TrUserData);
      'Message' ->
	  v_msg_Message(Msg, ['Message'], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,v_msg_Response/3}).
v_msg_Response(#{} = M, Path, _) ->
    case M of
      #{result := F1} -> v_type_string(F1, [result | Path]);
      _ -> ok
    end,
    case M of
      #{description := F2} ->
	  v_type_string(F2, [description | Path]);
      _ -> ok
    end,
    lists:foreach(fun (result) -> ok;
		      (description) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_Response(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'Response'},
		  M, Path);
v_msg_Response(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Response'}, X, Path).

-dialyzer({nowarn_function,v_msg_Request/3}).
v_msg_Request(#{} = M, Path, _) ->
    case M of
      #{company := F1} -> v_type_string(F1, [company | Path]);
      _ -> ok
    end,
    case M of
      #{quantity := F2} ->
	  v_type_int32(F2, [quantity | Path]);
      _ -> ok
    end,
    case M of
      #{price := F3} -> v_type_float(F3, [price | Path]);
      _ -> ok
    end,
    lists:foreach(fun (company) -> ok;
		      (quantity) -> ok;
		      (price) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_Request(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'Request'},
		  M, Path);
v_msg_Request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Request'}, X, Path).

-dialyzer({nowarn_function,v_msg_User/3}).
v_msg_User(#{} = M, Path, _) ->
    case M of
      #{username := F1} ->
	  v_type_string(F1, [username | Path]);
      _ -> ok
    end,
    case M of
      #{password := F2} ->
	  v_type_string(F2, [password | Path]);
      _ -> ok
    end,
    lists:foreach(fun (username) -> ok;
		      (password) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_User(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'User'},
		  M, Path);
v_msg_User(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'User'}, X, Path).

-dialyzer({nowarn_function,v_msg_Message/3}).
v_msg_Message(#{} = M, Path, TrUserData) ->
    case M of
      #{type := F1} -> v_type_string(F1, [type | Path]);
      _ -> ok
    end,
    case M of
      #{user := F2} ->
	  v_msg_User(F2, [user | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{request := F3} ->
	  v_msg_Request(F3, [request | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{response := F4} ->
	  v_msg_Response(F4, [response | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (type) -> ok;
		      (user) -> ok;
		      (request) -> ok;
		      (response) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_Message(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'Message'},
		  M, Path);
v_msg_Message(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Message'}, X, Path).

-dialyzer({nowarn_function,v_type_int32/2}).
v_type_int32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_float/2}).
v_type_float(N, _Path) when is_float(N) -> ok;
v_type_float(N, _Path) when is_integer(N) -> ok;
v_type_float(infinity, _Path) -> ok;
v_type_float('-infinity', _Path) -> ok;
v_type_float(nan, _Path) -> ok;
v_type_float(X, Path) ->
    mk_type_error(bad_float_value, X, Path).

-dialyzer({nowarn_function,v_type_string/2}).
v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({inline,id/2}).
id(X, _TrUserData) -> X.


get_msg_defs() ->
    [{{msg, 'Response'},
      [#{name => result, fnum => 1, rnum => 2, type => string,
	 occurrence => optional, opts => []},
       #{name => description, fnum => 2, rnum => 3,
	 type => string, occurrence => optional, opts => []}]},
     {{msg, 'Request'},
      [#{name => company, fnum => 1, rnum => 2,
	 type => string, occurrence => optional, opts => []},
       #{name => quantity, fnum => 2, rnum => 3, type => int32,
	 occurrence => optional, opts => []},
       #{name => price, fnum => 3, rnum => 4, type => float,
	 occurrence => optional, opts => []}]},
     {{msg, 'User'},
      [#{name => username, fnum => 1, rnum => 2,
	 type => string, occurrence => optional, opts => []},
       #{name => password, fnum => 2, rnum => 3,
	 type => string, occurrence => optional, opts => []}]},
     {{msg, 'Message'},
      [#{name => type, fnum => 1, rnum => 2, type => string,
	 occurrence => optional, opts => []},
       #{name => user, fnum => 2, rnum => 3,
	 type => {msg, 'User'}, occurrence => optional,
	 opts => []},
       #{name => request, fnum => 3, rnum => 4,
	 type => {msg, 'Request'}, occurrence => optional,
	 opts => []},
       #{name => response, fnum => 4, rnum => 5,
	 type => {msg, 'Response'}, occurrence => optional,
	 opts => []}]}].


get_msg_names() ->
    ['Response', 'Request', 'User', 'Message'].


get_group_names() -> [].


get_msg_or_group_names() ->
    ['Response', 'Request', 'User', 'Message'].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def('Response') ->
    [#{name => result, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []},
     #{name => description, fnum => 2, rnum => 3,
       type => string, occurrence => optional, opts => []}];
find_msg_def('Request') ->
    [#{name => company, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []},
     #{name => quantity, fnum => 2, rnum => 3, type => int32,
       occurrence => optional, opts => []},
     #{name => price, fnum => 3, rnum => 4, type => float,
       occurrence => optional, opts => []}];
find_msg_def('User') ->
    [#{name => username, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []},
     #{name => password, fnum => 2, rnum => 3,
       type => string, occurrence => optional, opts => []}];
find_msg_def('Message') ->
    [#{name => type, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []},
     #{name => user, fnum => 2, rnum => 3,
       type => {msg, 'User'}, occurrence => optional,
       opts => []},
     #{name => request, fnum => 3, rnum => 4,
       type => {msg, 'Request'}, occurrence => optional,
       opts => []},
     #{name => response, fnum => 4, rnum => 5,
       type => {msg, 'Response'}, occurrence => optional,
       opts => []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> client.



gpb_version_as_string() ->
    "4.0.2".

gpb_version_as_list() ->
    [4,0,2].
